services:
  backend:
    build:
      context: ./backend
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    environment:
      - DB_HOST=db  # Override DB_HOST to use the service name instead of localhost
      - ALLOW_ORIGIN=localhost:8080  # Make sure this is explicitly set
    command:
      - "run"
      - "--allow-net=0.0.0.0:3000,localhost:3000,localhost:5432,db:5432"
      - "--allow-read=.,./backend,./frontend,./cards_images,.env"
      - "--allow-env"
      - "--no-lock"
      - "back_server.ts"
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    volumes:
      - ./backend/cards_images:/app/cards_images  # Mount card images only, not the source code
      - ./backend/convertIMG.ts:/app/convertIMG.ts  # Mount the convertIMG.ts file

  # Improved db-init service with restricted permissions
  db-init:
    build:
      context: ./backend
    restart: "no"
    networks:
      - app-network
    env_file:
      - ./.env
    environment:
      - DB_HOST=db
    volumes:
      - ./backend/cards_images:/app/cards_images
    depends_on:
      db:
        condition: service_healthy  # Wait for DB to be healthy
    command: ["run", "--allow-net=db:5432", "--allow-read=/app/cards_images,/app/convertIMG.ts,/app/insert_cards.ts,/app/.env", "--allow-env", "--unstable-ffi", "--no-lock", "insert_cards.ts"]

  frontend:
    build:
      context: .
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app/frontend
    # Note: Frontend security is handled in the Dockerfile with:
    # RUN deno compile --allow-net --allow-read=./frontend --output app server.ts 8080

  # Database service with health check
  db:
    image: postgres:14
    container_name: DataBase
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
